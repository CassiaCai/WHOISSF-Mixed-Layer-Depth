#!/usr/bin/env python

##### DATA AVAILABILITY IN WEEK 2 DOCUMENTATION ##### Completed in Jupyter Notebook. 

### Import everything that I might need.
import matplotlib.pyplot as plt; import numpy as np; import netCDF4; from netCDF4 import Dataset
import pandas as pd; import numpy.ma as ma; import time as timeit; import os; import math; import numpy as np
import itertools; import scipy.io; import mat73; import collections
import cartopy; import cartopy.crs as ccrs
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
%matplotlib inline

### Inefficient code below.
filelen = []; years = []
jan = [] ; feb = [] ; march = [] ; april = []
may = [] ; june = [] ; july = [] ; aug = []
sept = [] ; octob = [] ; nov = [] ; dec = []

for year in range(1977,2010):
    filename = 'casts_{}.mat'.format(year)
    file = scipy.io.loadmat(filename,squeeze_me=True)
    npfile = file['casts_{}'.format(year)]
    years.append(year)
    
    jan_intermediate = []; feb_intermediate = []
    march_intermediate = []; april_intermediate = []
    may_intermediate = []; june_intermediate = []
    july_intermediate = []; aug_intermediate = []
    sept_intermediate = []; octob_intermediate = []
    nov_intermediate = []; dec_intermediate = []
    
    for i in range(len(npfile)):
        
        a = npfile[i]['yd']
        if a <= 31:
            jan_intermediate.append(a)
        if a > 31 and a <= 59:
            feb_intermediate.append(a)
        if a > 59 and a <= 90:
            march_intermediate.append(a)
        if a > 90 and a <= 120:
            april_intermediate.append(a)
        if a > 120 and a <= 151:
            may_intermediate.append(a)
        if a > 151 and a <= 181:
            june_intermediate.append(a)
        if a > 182 and a <= 212:
            july_intermediate.append(a)
        if a > 212 and a <= 243:
            aug_intermediate.append(a)
        if a > 243 and a <= 273:
            sept_intermediate.append(a)
        if a > 273 and a <= 304:
            octob_intermediate.append(a)
        if a > 304 and a <= 334:
            nov_intermediate.append(a)
        if a > 334 and a <= 365:
            december_intermediate.append(a)
    
    jan.append(len(jan_intermediate))
    feb.append(len(feb_intermediate))
    march.append(len(march_intermediate))
    april.append(len(april_intermediate))
    may.append(len(may_intermediate))
    june.append(len(june_intermediate))
    july.append(len(july_intermediate))
    aug.append(len(aug_intermediate))
    sept.append(len(sept_intermediate))
    octob.append(len(octob_intermediate))
    nov.append(len(nov_intermediate))
    dec.append(len(dec_intermediate))
    
df = pd.DataFrame(index=years, 
                  data={'1': jan,'2': feb,'3': march,'4': april,'5': may,
                        '6': june,'7': july,'8': aug,'9': sept,'10': octob,
                        '11': nov,'12': dec})
print(df)

### Data coverage similar to Richaud et al. 2016 Figure 7. But I have squares...want circles.
### Maybe scatter plot works better.
from matplotlib.ticker import AutoMinorLocator; from matplotlib.ticker import FixedLocator

plt.figure(figsize=(20,10))
z = df.values

minor_locator1 = AutoMinorLocator(2)
minor_locator2 = FixedLocator([0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,
                              8.5,9.5,10.5,11.5,12.5,13.5,14.5,
                              15.5,16.5,17.5,18.5,19.5,20.5,21.5,
                              22.5,23.5,24.5,25.5,26.5,27.5,28.5,29.5,
                              30.5,31.5,32.5])
plt.gca().xaxis.set_minor_locator(minor_locator1)
plt.gca().yaxis.set_minor_locator(minor_locator2)
plt.grid(which='minor',color='white',linewidth=5)

plt.grid(b=True, which='major', color='black', linestyle='')

plt.xticks(np.arange(12), ['1', '2', '3','4','5','6','7','8','9','10','11','12'],fontsize=8,color='black')
plt.yticks(np.arange(33), ['1977','1978','1979','1980','1981','1982','1983','1984','1985','1986',
                          '1987','1988','1989','1989','1990','1991','1992','1993','1994','1995','1996',
                          '1997','1998','1999','2000','2001','2002','2003','2004','2005','2006',
                          '2007','2008','2009'],fontsize=8,color='black')
plt.xlabel('Month',fontsize=12,color='black')
plt.ylabel('Year',fontsize=12,color='black')
plt.box(False)
plt.tick_params(axis='y', which='minor', colors='white')
plt.tick_params(axis='x', which='minor', colors='white')

plt.imshow(z,cmap = 'pink')
im = plt.imshow(z,cmap = 'pink',vmin = 0,vmax = 500)
cbar = plt.colorbar(im, cmap='pink', norm=norm, ticks=[0,100,200,300,400,500],aspect=50,pad=0.01)
cbar.ax.tick_params(labelsize=8,colors='black') 
