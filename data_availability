#!/usr/bin/env python

##### DATA AVAILABILITY IN WEEK 2 DOCUMENTATION ##### Completed in Jupyter Notebook. 
import matplotlib.pyplot as plt; import numpy as np; import netCDF4; from netCDF4 import Dataset
import pandas as pd; import numpy.ma as ma; import time as timeit; import os; import math; import numpy as np
import itertools; import scipy.io; import mat73; import collections
import cartopy; import cartopy.crs as ccrs
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
from matplotlib.ticker import FuncFormatter
from matplotlib.ticker import AutoMinorLocator; from matplotlib.ticker import FixedLocator
%matplotlib inline

filelen = []; years = []
Bottles = []; MK3 = []
SBE17 = []; SBE19 = []
MK5 = []; SBE19V2 = []
SBE911 = []; SBE19plus = []

for year in range(1977,2020):
    filename = 'casts_{}.mat'.format(year)
    file = scipy.io.loadmat(filename,squeeze_me=True)
    npfile = file['casts_{}'.format(year)]
    years.append(year)
    
    filelen.append(len(npfile))
    Bottles_intermediate = []; MK3_intermediate = []
    SBE17_intermediate = []; SBE19_intermediate = []
    MK5_intermediate = []; SBE19V2_intermediate = []
    SBE911_intermediate = []; SBE19plus_intermediate = []
    
    for i in range(len(npfile)):
        a = npfile[i]['gear']
        if a == 'Bottle':
            Bottles_intermediate.append(i)
        if a == 'MK-3':
            MK3_intermediate.append(i)
        if a == 'SBE-17':
            SBE17_intermediate.append(i)
        if a == 'SBE-19':
            SBE19_intermediate.append(i)
        if a == 'MK-5':
            MK5_intermediate.append(i)
        if a == 'SBE-19+V2':
            SBE19V2_intermediate.append(i)
        if a == 'SBE-911+':
            SBE911_intermediate.append(i)
        if a == 'SBE-19+':
            SBE19plus_intermediate.append(i)
    Bottles.append(len(Bottles_intermediate))
    MK3.append(len(MK3_intermediate))
    SBE17.append(len(SBE17_intermediate))
    SBE19.append(len(SBE19_intermediate))
    MK5.append(len(MK5_intermediate))
    SBE19V2.append(len(SBE19V2_intermediate))
    SBE911.append(len(SBE911_intermediate))
    SBE19plus.append(len(SBE19plus_intermediate))

df = pd.DataFrame(index=years, 
                  data={'Bottle': Bottles,'MK-3': MK3, 
                        'SBE-17': SBE17,'SBE-19': SBE19,
                        'SBE-19+V2': SBE19V2,'SBE-911+': SBE911,
                        'SBE-19+': SBE19plus,'MK-5': MK5})

plt.style.use('ggplot')
ax = df.plot(kind="bar", stacked=True, cmap = 'tab10')
plt.gcf().set_size_inches(15, 7.5)
plt.title('Data Collection Methods', fontsize = 20)
plt.xlabel('Years',fontsize=13); plt.ylabel('Data Availability',fontsize=13)
plt.savefig('datacollectionmethods_generalregion')
plt.show()

dfnew = pd.DataFrame(index=years, 
                  data={'count': number_data})

plt.style.use('ggplot')
ax = dfnew.plot(kind="bar", stacked=False, cmap = 'tab10')
plt.gcf().set_size_inches(15, 7.5)
plt.title('Data Coverage', fontsize = 20)
plt.xlabel('Years',fontsize=13); plt.ylabel('Data Availability',fontsize=13)
plt.savefig('datacoverage_generalregion')
plt.show()

filelen = []; years = []
jan = [] ; feb = [] ; march = [] ; april = []
may = [] ; june = [] ; july = [] ; aug = []
sept = [] ; octob = [] ; nov = [] ; dec = []

for year in range(1977,2020):
    filename = 'casts_{}.mat'.format(year)
    file = scipy.io.loadmat(filename,squeeze_me=True)
    npfile = file['casts_{}'.format(year)]
    years.append(year)    
    jan_intermediate = []; feb_intermediate = []
    march_intermediate = []; april_intermediate = []
    may_intermediate = []; june_intermediate = []
    july_intermediate = []; aug_intermediate = []
    sept_intermediate = []; octob_intermediate = []
    nov_intermediate = []; dec_intermediate = []        
    for i in range(len(npfile)):        
        a = npfile[i]['yd']
        if a <= 31:
            jan_intermediate.append(a)
        if a > 31 and a <= 59:
            feb_intermediate.append(a)
        if a > 59 and a <= 90:
            march_intermediate.append(a)
        if a > 90 and a <= 120:
            april_intermediate.append(a)
        if a > 120 and a <= 151:
            may_intermediate.append(a)
        if a > 151 and a <= 181:
            june_intermediate.append(a)
        if a > 182 and a <= 212:
            july_intermediate.append(a)
        if a > 212 and a <= 243:
            aug_intermediate.append(a)
        if a > 243 and a <= 273:
            sept_intermediate.append(a)
        if a > 273 and a <= 304:
            octob_intermediate.append(a)
        if a > 304 and a <= 334:
            nov_intermediate.append(a)
        if a > 334 and a <= 365:
            dec_intermediate.append(a)    
    jan.append(len(jan_intermediate))
    feb.append(len(feb_intermediate))
    march.append(len(march_intermediate))
    april.append(len(april_intermediate))
    may.append(len(may_intermediate))
    june.append(len(june_intermediate))
    july.append(len(july_intermediate))
    aug.append(len(aug_intermediate))
    sept.append(len(sept_intermediate))
    octob.append(len(octob_intermediate))
    nov.append(len(nov_intermediate))
    dec.append(len(dec_intermediate))
 
df = pd.DataFrame(index=years, 
                  data={'1': jan,'2': feb,'3': march,'4': april,'5': may,
                        '6': june,'7': july,'8': aug,'9': sept,'10': octob,
                        '11': nov,'12': dec})
print(df)
print(df.values)
print(len(df.values))

plt.gcf().set_size_inches(30, 15)

im = plt.imshow(z,cmap = 'pink')

plt.yticks(np.arange(43))

minor_locator1 = AutoMinorLocator(2)
minor_locator2 = FixedLocator([0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,
                              8.5,9.5,10.5,11.5,12.5,13.5,14.5,
                              15.5,16.5,17.5,18.5,19.5,20.5,21.5,
                              22.5,23.5,24.5,25.5,26.5,27.5,28.5,29.5,
                              30.5,31.5,32.5,33.5,34.5,35.5,36.5,37.5,38.5,39.5,40.5,41.5,42.5])
plt.gca().xaxis.set_minor_locator(minor_locator1)
plt.gca().yaxis.set_minor_locator(minor_locator2)
plt.grid(which='minor',color='white',linewidth=5)
plt.grid(b=True, which='major', color='black', linestyle='')

plt.xticks(np.arange(12), ['1', '2', '3','4','5','6','7','8','9','10','11','12'],fontsize=8,color='black')
plt.yticks(np.arange(43), ['1977','1978','1979','1980','1981','1982','1983','1984','1985','1986',
                          '1987','1988','1989','1990','1991','1992','1993','1994','1995','1996',
                          '1997','1998','1999','2000','2001','2002','2003','2004','2005','2006',
                          '2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019'],fontsize=11,color='black')
im = plt.imshow(z,cmap = 'pink',vmin = 0,vmax = 600)
cbar = plt.colorbar(im, cmap='pink', ticks=[0,100,200,300,400,500,600],aspect=50,pad=0.01)
cbar.outline.set_edgecolor('black')
cbar.ax.tick_params(labelsize=11,colors='black') 
plt.savefig('datacoverage_squares_generalregion.png')
plt.show()

### Random work in progress kept below

### Regional data coverage...sample code
import re
f = open("bndEcoGoME_full.txt", "r", encoding="utf-8")
f.read()
a = str( 41.6667  66.0000\n 41.8333  66.0000\n 41.8333  66.1667\n 42.0000  66.1667\n 42.0000  66.5000\n 42.1667  66.5000\n 42.1667  
    67.3333\n 42.0000  67.3333\n 42.0000  68.0000\n 44.3333  68.0000\n 44.3333  67.8333\n 44.5000  67.8333\n 44.5000  67.3333\n 
    44.3333  67.3333\n 44.3333  66.5000\n 44.1667  66.5000\n 44.1667  66.3333\n 44.0000  66.3333\n 44.0000  66.1667\n 43.5000  66.1667\n 
    43.5000  66.0000\n 42.6667  66.0000\n 42.6667  66.1667\n 42.5000  66.1667\n 42.5000  66.0000\n 42.1667  66.0000\n 42.1667  65.8333\n 
    42.0000  65.8333\n 42.0000  65.6667\n 41.6667  65.6667\n 41.6667  66.0000\n) #output of f.read()
output1 = a.split('\n')
new = []
for string in output1:
    output2 = string.split(' ')
    new.append(output2)
lon = []
lat = []
for i in range(31): 
    a = new[i][1]
    lat.append(a)
    b = new[i][3]
    lon.append(b)
lonlist = [float(i) for i in lon]
latlist = [float(i) for i in lat]
dfnew = pd.DataFrame({'lon': lonlist, 'lat': latlist,})
x = dfnew['lon']*-1 # Plot shape onto map to see
y = dfnew['lat'] 
plt.figure(figsize=(8, 8))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent([-78, -65, 34, 44.5], ccrs.PlateCarree())
ax.add_feature(cartopy.feature.COASTLINE)
gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                  linewidth=1, color='gray', alpha=0.5, linestyle='--')
gl.xlabels_top = False
gl.ylabels_left = False
gl.xformatter = LONGITUDE_FORMATTER
gl.yformatter = LATITUDE_FORMATTER
# plt.scatter(dfnew['lon']*-1,dfnew['lat'])
plot(x,y,color='red') #bndEcoGoME
cat = plot(x,y,color='red')
plt.show()

### Alternative. Using scipy convexhull
import re
f = open("bndEcoGoME_full.txt", "r", encoding="utf-8") # associated with a
f.read()
g = open("bndEcoGoMW_full.txt", "r", encoding="utf-8") # associated with b
g.read()

a = ' 41.6667  66.0000\n 41.8333  66.0000\n 41.8333  66.1667\n 42.0000  66.1667\n 42.0000  66.5000\n 42.1667  66.5000\n 42.1667  67.3333\n 42.0000  67.3333\n 42.0000  68.0000\n 44.3333  68.0000\n 44.3333  67.8333\n 44.5000  67.8333\n 44.5000  67.3333\n 44.3333  67.3333\n 44.3333  66.5000\n 44.1667  66.5000\n 44.1667  66.3333\n 44.0000  66.3333\n 44.0000  66.1667\n 43.5000  66.1667\n 43.5000  66.0000\n 42.6667  66.0000\n 42.6667  66.1667\n 42.5000  66.1667\n 42.5000  66.0000\n 42.1667  66.0000\n 42.1667  65.8333\n 42.0000  65.8333\n 42.0000  65.6667\n 41.6667  65.6667\n 41.6667  66.0000\n'
b = ' 41.6667  69.8333\n 42.0000  69.8333\n 42.0000  70.0000\n 42.1667  70.0000\n 42.1667  70.3333\n 42.0000  70.3333\n 42.0000  70.6667\n 42.3333  70.6667\n 42.3333  70.8333\n 42.5000  70.8333\n 42.5000  70.6667\n 42.6667  70.6667\n 42.6667  70.8333\n 42.8333  70.8333\n 42.8333  70.6667\n 43.1667  70.6667\n 43.1667  70.5000\n 43.3333  70.5000\n 43.3333  70.3333\n 43.5000  70.3333\n 43.5000  70.1667\n 43.6667  70.1667\n 43.6667  69.6667\n 43.8333  69.6667\n 43.8333  69.3333\n 44.0000  69.3333\n 44.0000  69.0000\n 44.1667  69.0000\n 44.1667  68.6667\n 44.3333  68.6667\n 44.3333  68.0000\n 42.0000  68.0000\n 41.8333  68.0000\n 41.8333  68.5000\n 41.6667  68.5000\n 41.6667  68.6667\n 41.5000  68.6667\n 41.5000  68.8333\n 41.3333  68.8333\n 41.3333  69.1667\n 41.5000  69.1667\n 41.5000  69.3333\n 41.6667  69.3333\n 41.6667  69.8333\n'
output1a = a.split('\n')
output1b = b.split('\n')

newa = []; newb = []

for string in output1a:
    output2a = string.split(' ')
    newa.append(output2a)
for string in output1b:
    output2b = string.split(' ')
    newb.append(output2b)
lon_a = []; lat_a = []
lon_b = []; lat_b = []

for i in range(31): 
    a1 = newa[i][1]
    lat_a.append(a1)
    a3 = newa[i][3]
    lon_a.append(a3)
for ii in range(44): 
    b1 = newb[ii][1]
    lat_b.append(b1)
    b3 = newb[ii][3]
    lon_b.append(b3)

lonlist_a = [float(i) for i in lon_a]; latlist_a = [float(i) for i in lat_a]
lonlist_b = [float(i) for i in lon_b]; latlist_b = [float(i) for i in lat_b]

df_a = pd.DataFrame({'lon': lonlist_a, 'lat': latlist_a,})
df_b = pd.DataFrame({'lon': lonlist_b, 'lat': latlist_b,})

print(df_b)
print(df_a)

df_basarray = np.array(df_b.iloc[:,0:2])
print(len(df_basarray))

from scipy.spatial import ConvexHull, convex_hull_plot_2d
hull = ConvexHull(df_basarray)

import matplotlib.pyplot as plt
plt.plot(df_basarray[:,0], df_basarray[:,1], 'o')
for simplex in hull.simplices:
    plt.plot(df_basarray[simplex,0], df_basarray[simplex,1], 'k-')
# print(hull.simplices)
# print(hull.area)

import pylab
import numpy
from scipy.spatial import ConvexHull

def is_p_inside_points_hull(points, p):
    global hull, new_points # Remove this line! Just for plotting!
    hull = ConvexHull(points)
    new_points = numpy.append(points, p, axis=0)
    new_hull = ConvexHull(new_points)
    if list(hull.vertices) == list(new_hull.vertices):
        return True
    else:
        return False

# Test: # check if some point is inside desired area.
points = df_basarray   # 30 random points in 2-D
# Note: the number of points must be greater than the dimention.
p = df_a.values
print (is_p_inside_points_hull(points, p)) w

# # Plot:
pylab.plot(points[:,0], points[:,1], 'o')
for simplex in hull.simplices:
    pylab.plot(points[simplex,0], points[simplex,1], 'k-')
pylab.plot(p[:,0], p[:,1], '^r')
pylab.show() # Evidently not, given that we set p = df_a.values

x_a = df_a['lon']*-1; y_a = df_a['lat']
x_b = df_b['lon']*-1; y_b = df_b['lat']
plot(x_a,y_a)
plot(x_b,y_b)
show()
