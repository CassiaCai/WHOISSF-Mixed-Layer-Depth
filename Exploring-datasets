#!/usr/bin/env python

##### EXPLORING DATASETS IN WEEK 1 DOCUMENTATION ##### Inefficient code. Completed in Jupyter Notebook. ASK how to show code in Jupyter Notebook format.

import matplotlib.pyplot as plt; import numpy as np; import netCDF4; from netCDF4 import Dataset
import pandas as pd; import numpy.ma as ma; import time as timeit; import os; import math
import itertools; import scipy.io; import mat73 
%matplotlib inline

# Streamlined. Should be made more efficient. ASK how.
### The years are maleable. 
### For 2015 to 2019 data, set range 2015 to 2020 and set year = 2015.
### For 2012 and 2014 data, set range 2012 to 2013 and range 2014 to 2015 respectively.
###### I don't know what to do with the v7.3 files. ASK. 

year = 1977

for year in range(1977,2010):
    filename = 'casts_{}.mat'.format(year)
    file = scipy.io.loadmat(filename)
    npfile = file['casts_{}'.format(year)]
    
    # print(npfile.dtype.names) ### There should be 16.
    npfile_cast = [npfile['cast']]
    npfile_lat = [npfile['lat']]
    npfile_lon = [npfile['lon']]
    npfile_yr = [npfile['yr']]
    npfile_yd = [npfile['yd']]
    npfile_dyd = [npfile['dyd']]
    npfile_depth = [npfile['depth']]
    npfile_pc = [npfile['pc']]
    npfile_vn = [npfile['vn']]
    npfile_np = [npfile['np']]
    npfile_s = [npfile['s']]
    npfile_t = [npfile['t']]
    npfile_p = [npfile['p']]
    npfile_cru = [npfile['cru']]
    npfile_opsid = [npfile['opsid']]
    npfile_gear = [npfile['gear']]
    
    cast_list = []; depth_list = []; lat_list = []; lon_list = []
    yd_list = []; dyd_list = []; depth_list = []; pc_list = []
    vn_list = []; np_list = []; cru_list = []; opsid_list = []; gear_list = []
    
    y = 0
    
    for y in range(0,len(npfile_cast)):       
        cast = [i[0][y] for i in npfile_cast] ### Cast ###### Sometimes, this throws an error "index XYZ is out of bounds for axis 0 with size XYZ". ASK.
        castlist = list(cast[0][0])
        castval = castlist[0]
        cast_list.append(castval)
        lat = [i[0][y] for i in npfile_lat] ### Latitude
        latlist = list(lat[0][0])
        latval = latlist[0]
        lat_list.append(latval)        
        lon = [i[0][y] for i in npfile_lon] ### Longitude
        lonlist = list(lon[0][0])
        lonval = lonlist[0]
        lon_list.append(lonval)    
        yd = [i[0][y] for i in npfile_yd] ### yd
        ydlist = list(yd[0][0])
        ydval = ydlist[0]
        yd_list.append(ydval)
        dyd = [i[0][y] for i in npfile_dyd] ### dyd
        dydlist = list(dyd[0][0])
        dydval = dydlist[0]
        dyd_list.append(dydval)
        depth = [i[0][y] for i in np2012depth] ### Depth
        depthlist = list(depth[0][0])
        depthval = depthlist[0]
        depth_list.append(depthval)
        ###### Still missing p, vn, np, cru, opsid, and gear. Streamline this.
        p = [i[0][y] for i in npfile_p] ### Pressure
        plist = list(p[0][0])
        t = [i[0][y] for i in npfile_t] ### Temperature
        tlist = list(t[0][0])
        s = [i[0][y] for i in npfile_s] ### Salinity
        slist = list(s[0][0])
        
        df_pts = pd.DataFrame({'p':plist,'t':tlist, 's':slist})
        
        print(year,'; index:',y,'; dyd:',dydval,'; lat:',latval,'; lon:',lonval,'; depth:',depthval,'; cast:',castval)
        
        plt.style.use('ggplot')        
        plt.subplot(1, 2, 1)
        plt.plot(df_pts['t'],df_pts['p']*-1,color='blue')
        plt.xlabel('Temperature')
        plt.ylabel('Pressure')        
        plt.subplot(1, 2, 2)
        plt.plot(df_pts['s'],df_pts['p']*-1,color='red')
        plt.xlabel('Salinity')
        plt.ylabel('Pressure')
        plt.tight_layout()
        plt.show()
    
        y = y + 1
        
    year = year + 1    
            
mat2012 = scipy.io.loadmat('casts_2012.mat')
mat2014 = scipy.io.loadmat('casts_2012.mat')
# files for 2011 and 2013 are v7.3 files. All others are scipy readable.

# ---------------------------------------------------------------------------------------------------------------------#

# 3. Plot some exploratory maps / exploring data availability.
plt.style.use('seaborn-whitegrid')
     # Plotting locations of data collection from all 'gears'
import cartopy; import cartopy.crs as ccrs; from cartopy.mpl.gridliner; import LONGITUDE_FORMATTER, LATITUDE_FORMATTER

latitude = df_2009['lat']
longitude = df_2009['lon']
longitudeneg = -1 * longitude
latitudeneg = 1 * latitude

plt.figure(figsize=(8, 8))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent([-78, -65, 34, 44.5], ccrs.PlateCarree())
ax.coastlines(resolution='110m')
ax.add_feature(cartopy.feature.STATES, linewidth=1.5, edgecolor='black',alpha=0.3)
ax.add_feature(cartopy.feature.COASTLINE)
gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,linewidth=1, color='gray', alpha=0.5, linestyle='--')
gl.xlabels_top = False
gl.ylabels_left = False
gl.xformatter = LONGITUDE_FORMATTER
gl.yformatter = LATITUDE_FORMATTER
plt.title('Data Collection Locations', size = 22)
plt.plot(longitudeneg, latitudeneg,  linewidth=0, markersize=0.7, marker='o', color='red')
plt.show()

# Exploring data availability
newlat = []
countinorder = []
for value in countinorder:
     # continue from here !!!
