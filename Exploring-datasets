#!/usr/bin/env python

#### EXPLORING DATASETS IN WEEK 1 DOCUMENTATION ####

import matplotlib.pyplot as plt; import numpy as np; import netCDF4; from netCDF4 import Dataset
import pandas as pd; import numpy.ma as ma; import time as timeit; import os; import math
import itertools; import scipy.io

# Run each file separately as we want to look at each file separately for now. 
# Can later make this code more efficient by running all the files in a loop. Will be a quick process.
mat1977 = scipy.io.loadmat('casts_1977.mat')
mat1978 = scipy.io.loadmat('casts_1978.mat')
mat1979 = scipy.io.loadmat('casts_1979.mat')

mat1980 = scipy.io.loadmat('casts_1980.mat')
mat1981 = scipy.io.loadmat('casts_1981.mat')
mat1982 = scipy.io.loadmat('casts_1982.mat')
mat1983 = scipy.io.loadmat('casts_1983.mat')
mat1984 = scipy.io.loadmat('casts_1984.mat')
mat1985 = scipy.io.loadmat('casts_1985.mat')
mat1986 = scipy.io.loadmat('casts_1986.mat')
mat1987 = scipy.io.loadmat('casts_1987.mat')
mat1988 = scipy.io.loadmat('casts_1988.mat')
mat1989 = scipy.io.loadmat('casts_1989.mat')

mat1990 = scipy.io.loadmat('casts_1990.mat')
mat1991 = scipy.io.loadmat('casts_1991.mat')
mat1992 = scipy.io.loadmat('casts_1992.mat')
mat1993 = scipy.io.loadmat('casts_1993.mat')
mat1994 = scipy.io.loadmat('casts_1994.mat')
mat1995 = scipy.io.loadmat('casts_1995.mat')
mat1996 = scipy.io.loadmat('casts_1996.mat')
mat1997 = scipy.io.loadmat('casts_1997.mat')
mat1998 = scipy.io.loadmat('casts_1998.mat')
mat1999 = scipy.io.loadmat('casts_1999.mat')

mat2000 = scipy.io.loadmat('casts_2000.mat')
mat2001 = scipy.io.loadmat('casts_2001.mat')
mat2002 = scipy.io.loadmat('casts_2002.mat')
mat2003 = scipy.io.loadmat('casts_2003.mat')
mat2004 = scipy.io.loadmat('casts_2004.mat')
mat2005 = scipy.io.loadmat('casts_2005.mat')
mat2006 = scipy.io.loadmat('casts_2006.mat')
mat2007 = scipy.io.loadmat('casts_2007.mat')
mat2008 = scipy.io.loadmat('casts_2008.mat')
mat2009 = scipy.io.loadmat('casts_2009.mat')

# We run into some problems for files >= 2010. Need to use a HDF reader for matlab v7.3 files. 
## Will do this later.

# Convert from .mat file to a more familiar format ... Will try with mat2009 #
mat2009.keys()
type(mat2009['casts_2009']),mat2009['casts_2009'].shape
type(mat2009['casts_2009'][0][0]),mat2009['casts_2009'][0][0].shape
mat2009['casts_2009'][0][0]['cast'], mat2009['casts_2009'][0][0]['depth']
[item.flat[0] for item in mat2009['casts_2009'][0][0]]

data = [[row.flat[0] for row in line] for line in mat2009['casts_2009'][0]]
columns = ['cast','lat', 'lon', 'yr', 'yd', 'dyd','depth','pc','vn','np','s','t','p','cru','opsid','gear']
df_2009 = pd.DataFrame(data, columns=columns)
print(df_2009) 

# Let's try to plot some exploratory graphs! #
plt.style.use('seaborn-whitegrid')

     # As a line graph. Does not look good.
plt.figure(figsize=(8,8))
plt.ylabel(' Depth in meters ', size = 12, rotation=90)
plt.xlabel(' Day Count ', size = 12, rotation=0)
plt.plot(smaller_df_2009["yd"], smaller_df_2009["depth"], linestyle='-', color='black',lw=0.5)
     # Consequently, as a scatter plot. Still does not look good as expected.
plt.figure(figsize=(8,8))
x = smaller_df_2009["yd"]
y = smaller_df_2009["depth"]
plt.plot(x, y, 'o', color='black')
     # Better as a bar graph.
plt.figure(figsize=(8,8))
x = smaller_df_2009["yd"]
y = smaller_df_2009["depth"]
plt.bar(x,y)
plt.show()
     # Plotting temperature and depth
plt.figure(figsize=(8,8))
x = smaller_df_2009["t"]
y = smaller_df_2009["depth"]
plt.ylabel(' Depth in meters ', size = 16, rotation=90)
plt.xlabel(' Temperature ', size = 16, rotation=0)
plt.bar(x,y,0.5)
plt.show()
     # Plotting locations of data collection, can interpolate data later to get smooth surface
import cartopy.crs as ccrs
import matplotlib.pyplot as plt

latitude = df_2009['lat']
print(latitude.max())
print(latitude.min())

longitude = df_2009['lon']
print(longitude.max())
print(longitude.min())

longitudeneg = -1 * longitude
latitudeneg = 1 * latitude

plt.figure(figsize=(8, 8))

ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent([-81.5, -65, 27, 44.5], ccrs.PlateCarree())
ax.coastlines(resolution='110m')
ax.add_feature(cartopy.feature.STATES, linewidth=1.5, edgecolor='black',alpha=0.5)

plt.title('Data Collection Locations', size = 22)
plt.plot(longitudeneg, latitudeneg,  linewidth=0, markersize=0.7, marker='o', color='red')
plt.show()

# QUESTIONS AND PROBLEMS
### In the s, p, t columns, there are series within the columns after conversion to dataframe. 
### What does this series mean?
