#!/usr/bin/env python

#### EXPLORING DATASETS IN WEEK 1 DOCUMENTATION ####

import matplotlib.pyplot as plt; import numpy as np; import netCDF4; from netCDF4 import Dataset
import pandas as pd; import numpy.ma as ma; import time as timeit; import os; import math
import itertools; import scipy.io; import mat73                                                                  #mat73 should load v7.3 files but takes a long time.
%matplotlib inline

# Can run each file separately as we want to look at each file separately for now. But below loads all files.
year = 1977
for year in range(1977,2010):
    matfile = "{}".format(year)
    name = 'mat'+ matfile
    filename = 'casts_{}.mat'.format(year)
    scipy.io.loadmat(filename)
    year = year + 1
for year in range(2015, 2019):
    matfile = "{}".format(year)
    name = 'mat'+ matfile
    filename = 'casts_{}.mat'.format(year)
    scipy.io.loadmat(filename)
    year = year + 1
mat2011 = mat73.loadmat('casts_2011.mat')                                                                                           #takes a long time. Ask for help.
mat2012 = scipy.io.loadmat('casts_2012.mat')
mat2013 = mat73.loadmat('casts_2013.mat')                                                                                           #takes a long time. Ask for help.
mat2014 = scipy.io.loadmat('casts_2012.mat')
# files for 2011 and 2013 are v7.3 files. All others are scipy readable.

# Convert from .mat file to a more familiar format ... Will try with mat2009 #
mat2009 = scipy.io.loadmat('casts_2009.mat')
mat2009.keys()
type(mat2009['casts_2009']),mat2009['casts_2009'].shape
type(mat2009['casts_2009'][0][0]),mat2009['casts_2009'][0][0].shape
mat2009['casts_2009'][0][0]['cast'], mat2009['casts_2009'][0][0]['depth']
[item.flat[0] for item in mat2009['casts_2009'][0][0]]

data = [[row.flat[0] for row in line] for line in mat2009['casts_2009'][0]]
columns = ['cast','lat', 'lon', 'yr', 'yd', 'dyd','depth','pc','vn','np','s','t','p','cru','opsid','gear']
df_2009 = pd.DataFrame(data, columns=columns)
print(df_2009) 

# Let's try to plot some exploratory graphs! #
plt.style.use('seaborn-whitegrid')

     # Plotting locations of data collection, can interpolate data later to get smooth surface
import cartopy
import cartopy.crs as ccrs
import matplotlib.pyplot as plt
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
 
longitudeneg = -1 * longitude
latitudeneg = 1 * latitude

plt.figure(figsize=(8, 8))

ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent([-78, -65, 34, 44.5], ccrs.PlateCarree())
ax.coastlines(resolution='110m')
ax.add_feature(cartopy.feature.STATES, linewidth=1.5, edgecolor='black',alpha=0.3)
ax.add_feature(cartopy.feature.COASTLINE)

gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                  linewidth=1, color='gray', alpha=0.5, linestyle='--')
gl.xlabels_top = False
gl.ylabels_left = False
gl.xformatter = LONGITUDE_FORMATTER
gl.yformatter = LATITUDE_FORMATTER

# plt.title('Data Collection Locations', size = 22)
plt.plot(longitudeneg, latitudeneg,  linewidth=0, markersize=0.7, marker='o', color='red')
plt.show()

# Exploring data availability
newlat = []
countinorder = []
for value in countinorder:
     # continue from here !!!
