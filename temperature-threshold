#!/usr/bin/env python

import matplotlib.pyplot as plt; import numpy as np; import netCDF4; from netCDF4 import Dataset; import statistics
import pandas as pd; import numpy.ma as ma; import time as timeit; import os; import math; import numpy as np
import itertools; import scipy.io; import collections; import cartopy; import cartopy.crs as ccrs
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
from matplotlib.ticker import FuncFormatter; from matplotlib.ticker import AutoMinorLocator; from matplotlib.ticker import FixedLocator
from shapely.geometry import Point; from shapely.geometry.polygon import Polygon
%matplotlib inline

for year in range(2019,2020):
    filename = 'casts_{}.mat'.format(year)
    file = scipy.io.loadmat(filename,squeeze_me=True)
    npfile = file['casts_{}'.format(year)]
        
    for i in range(len(npfile)):
        yd = npfile[i]['yd']
        p = npfile[i]['p']
        s = npfile[i]['s']
        t = npfile[i]['t']
        lat = npfile[i]['lat']
        lon = npfile[i]['lon']
        if yd >= 0 and yd <= 365: #273 to 304
            print(yd, '---', lon, '---',lat)
            df_pts = pd.DataFrame({'p':p,'t':t})
            df_ptsnew = df_pts.dropna()
            df_final = pd.DataFrame(df_ptsnew.values) # 0 is pressure, 1 is temperature
            l=[i for i in df_final[0] if i<=5]
            if len(l) > 0:
                surfaceval = []
                for ii in range(len(l)):
#                     print(df_final[1][ii])
                    val = df_final[1][ii]
                    surfaceval.append(val)
            surfacevalmean = statistics.mean(surfaceval)
            print(surfacevalmean)
